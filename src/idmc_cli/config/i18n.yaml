english:
  help:
    common:
      options:
        debug: If true, will print the API request details to console.
        pretty: If true, will pretty print the returned JSON.
        output: Path that output file should be written to. Supported file formats include json, csv and xlsx.
      errors:
          id-name-missing: Either the id or name option must be included.
          id-path-missing: Either the id or path option must be included.
          id-path-type-missing: Either the id needs to be provided, or the path and type needs to be provided.
          body-id-path-type-missing: Either the body, id, or both the path and type need to be provided.
          path-type-missing: Both path and type must be included when not searching by id.
          bad-file-type: Invalid output file extension specified.
    
    users:
      get:
        options:
          id: (Optional) Filter by user id. Use this option or the --username option.
          username: (Optional) Filter by user name. Use this option or the --id option.
      
      delete:
        options:
          id: User id to be deleted. Use this option or the --username option.
          username: User name to be deleted. Use this option or the --id option.
        errors:
          id-uname-missing: Either the id or username option must be included.

      create:
        options:
          name: Informatica Intelligent Cloud Services user name.
          first_name: First name for the user account.
          last_name: Last name for the user account.
          password: Informatica Intelligent Cloud Services password. If password is empty, the user receives an activation email. Maximum length is 255 characters.
          description: Description of the user.
          email: Email address for the user.
          title: Job title of the user.
          phone: Phone number for the user.
          force_password_change: Determines whether the user must reset the password after the user logs in for the first time.
          max_login_attempts: Number of times a user can attempt to log in before the account is locked.
          authentication: "Determines whether the user accesses Informatica Intelligent Cloud Services through single sign-in (SAML). Use one of the following values: 0 (Native), 1 (SAML)."
          alias_name: Required when authentication is not 0. The user identifier or user name in the 3rd party system.
          role_ids: Required when no group IDs are included. Comma separated list of IDs for the roles to assign to the user.
          role_names: Required when no group IDs are included. Comma separated list of Names for the roles to assign to the user.
          group_ids: Required when no role IDs are included. Comma separated list of IDs for the user groups to assign to the user.
          group_names: Required when no role IDs are included. Comma separated list of Names for the user groups to assign to the user.
        errors:
          rid-rname-gid-gname-missing: The user needs to have at least one role or one group assigned.

      add-roles:
        options:
          id: ID of user to be updated. Must specify this option or --username.
          username: ID of user to be updated. Must specify this option or --id.
          role_ids: Comma separated list of role ids to be added to user. Must specify this option or --role-names.
          role_names: Comma separated list of role names to be added to user. Must specify this option or --role-ids.
        errors:
          id-uname-missing: Either the id or username option must be included.
          rid-rname-missing: Either the role id's or role names option must be included.

      remove-roles:
        options:
          id: ID of user to be updated. Must specify this option or --username.
          username: Username to be updated. Must specify this option or --id.
          role_ids: Comma separated list of role ids to be added to user. Must specify this option or --roleNames.
          role_names: Comma separated list of role names to be added to user. Must specify this option or --roleIds.
        errors:
          id-uname-missing: Either the id or username option must be included.
          rid-rname-missing: Either the role id's or role names option must be included.

      add-groups:
        options:
          id: ID of user to be updated. Must specify this option or --username.
          username: Username to be updated. Must specify this option or --id.
          group_ids: Comma separated list of group ids to be added to user. Must specify this option or --group-names.
          group_names: Comma separated list of group names to be added to user. Must specify this option or --group-ids.
        errors:
          id-uname-missing: Either the id or username option must be included.
          gid-gname-missing: Either the group id's or group names option must be included.

      remove-groups:
        options:
          id: ID of user to be updated. Must specify this option or --username.
          username: Username to be updated. Must specify this option or --id.
          group_ids: Comma separated list of group ids to be removed from the user. Must specify this option or --group-names.
          group_names: Comma separated list of group names to be removed from the user. Must specify this option or --group-ids.
        errors:
          id-uname-missing: Either the id or username option must be included.
          gid-gname-missing: Either the group id's or group names option must be included.

    password:
      change:
        options:
          id: User id to be updated. Use this option or the --username option. This or the --username option is required if an administrator is changing the password for another user.
          username: User name to be updated. Use this option or the --id option. This or the --id option is required if an administrator is changing the password for another user.
          old_password: The old password for the user. Required if you are changing your own password.
          new_password: The new password for the user.
      reset:
        options:
          id: User id to be updated. Use this option or the --username option.
          username: User name to be updated. Use this option or the --id option.
          security_answer: Security answer to the user's security question.
          new_password: The new password for the user.

    user-groups:
      get:
        options:
          id: Filter by user group id. Use this option or the --username option.
          name: Filter by user group name. Use this option or the --id option.

      create:
        options:
          name: Name of the new user group.
          description: Description of the new user group.
          role_ids: Comma separated list of role ids to be added to the new user group. Either this or the --role-names group is required.
          role_names: Comma separated list of role names to be added to the new user group. Either this or the --role-ids group is required.
          user_ids: Comma separated list of user ids to be added to the new user group.  Use this option or the --user-names option.
          user_names: Comma separated list of user names to be added to the new user group. Use this option or the --user-ids option.
        errors:
          rid-rname-missing: Either the role id's or role names option must be included.
      
      add-roles:
        options:
          id: ID of user group to be updated. Must specify this option or --group-name.
          group_name: Name of user group to be updated. Must specify this option or --id.
          role_ids: Comma separated list of role ids to be added to user. Must specify this option or --role-names.
          role_names: Comma separated list of role names to be added to user. Must specify this option or --role-ids.
        errors:
          id-gname-missing: Either the id or group name option must be included.
          rid-rname-missing: Either the role id's or role names option must be included.

      delete:
        options:
          id: User group id to be deleted. Use this option or the --name option.
          name: User group name to be deleted. Use this option or the --id option.

    roles:
      get:
        options:
          id: Filter by role id.
          name: Filter by role name.
          expand: Expand role privileges.

      create:
        options:
          name: Name for new role.
          description: Description of the new role.
          privilege_ids: Comma separated list of privilege IDs for the new role. Must include this option or the --privilege-names option.
          privilege_names: Comma separated list of privilege names for the new role. Must include this option or the --privilege-ids option.
        errors:
          pid-pname-missing: Either the privilege id's or privilege names option must be included.

      add-privileges:
        options:
          id: ID of role to be updated. Must specify this option or --name.
          name: Name of role to be updated. Must specify this option or --id.
          privilege_ids: Comma separated list of privilege ids to be added to user. Must specify this option or --privilege-names.
          privilege_names: Comma separated list of privilege names to be added to user. Must specify this option or --privilege-ids.
        errors:
          pid-pname-missing: Either the privilege id's or privilege names option must be included.

      remove-privileges:
        options:
          id: ID of role to be updated. Must specify this option or --name.
          name: Name of role to be updated. Must specify this option or --id.
          privilege_ids: Comma separated list of privilege ids to be removed from user. Must specify this option or --privilege-names.
          privilege_names: Comma separated list of privilege names to be removed from user. Must specify this option or --privilege-ids.
        errors:
          pid-pname-missing: Either the privilege id's or privilege names option must be included.

      delete:
        options:
          id: Role id to be deleted. Use this option or the --name option.
          name: Role name to be deleted. Use this option or the --id option.

    privileges:
      get:
        options:
          all: If included will return a full list of privileges, even those that are disabled or unassigned.

    lookup:
      object:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
        errors:
          id-path-type-missing: Either the id needs to be provided, or the path and type needs to be provided.
          path-type-missing: Both path and type must be included when not searching by id.

      objects:
        options:
          body: JSON payload containing the search conditions for the objects.

    objects:
      get:
        options:
          id: Filter the returned objects by id.
          name: Filter the returned objects by name.
          type: "Asset type. Type can be project, folder, or one of the following asset types: DTEMPLATE, MTT, DSS, DMASK, DRS, DMAPPLET, MAPPLET, BSERVICE, HSCHEMA, PCS, FWCONFIG, CUSTOMSOURCE, MI_TASK, WORKFLOW, TASKFLOW, UDF, PROJECT, FOLDER, PROCESS, GUIDE, AI_CONNECTION, AI_SERVICE_CONNECTOR, PROCESS_OBJECT, B2BGW_MONITOR, B2BGW_CUSTOMER, B2BGW_SUPPLIER, MDM_BUSINESS_ENTITY, MDM_REFERENCE_ENTITY, MDM_HIERARCHY, MDM_RELATIONSHIP, MDM_JOB_DEFINITION, MDM_AUTHORIZATION, MDM_BUSINESS_EVENT, MDM_REPORT_SET, MDM_REPORT, MDM_DYNAMIC_POOL, MDM_APPLICATION, MDM_SRC_SYSTEM, MDM_APP_COMPONENT, MDM_APP_PAGE, CLEANSE, DEDUPLICATE, DICTIONARY, EXCEPTION, LABELER, PARSE, RULE_SPECIFICATION, VERIFIER"
          location: The project and folder path where the assets are located, such as Default/Sales. Must include this option or the type option.
        errors:
          location-type-missing: Either the location or type option must be included.
      query:
        options:
          type: "Asset type. Type can be project, folder, or one of the following asset types: DTEMPLATE, MTT, DSS, DMASK, DRS, DMAPPLET, MAPPLET, BSERVICE, HSCHEMA, PCS, FWCONFIG, CUSTOMSOURCE, MI_TASK, WORKFLOW, TASKFLOW, UDF, PROJECT, FOLDER, PROCESS, GUIDE, AI_CONNECTION, AI_SERVICE_CONNECTOR, PROCESS_OBJECT, B2BGW_MONITOR, B2BGW_CUSTOMER, B2BGW_SUPPLIER, MDM_BUSINESS_ENTITY, MDM_REFERENCE_ENTITY, MDM_HIERARCHY, MDM_RELATIONSHIP, MDM_JOB_DEFINITION, MDM_AUTHORIZATION, MDM_BUSINESS_EVENT, MDM_REPORT_SET, MDM_REPORT, MDM_DYNAMIC_POOL, MDM_APPLICATION, MDM_SRC_SYSTEM, MDM_APP_COMPONENT, MDM_APP_PAGE, CLEANSE, DEDUPLICATE, DICTIONARY, EXCEPTION, LABELER, PARSE, RULE_SPECIFICATION, VERIFIER"
          location: The project and folder path where the assets are located, such as Default/Sales.
          tag: The tag associated with the assets.
          checked-out-by: User who checked out the asset.
          checked-out-since: Assets that have been checked out since date/time.
          checked-out-until: Assets that have been checked out until date/time.
          checked-in-by: User who last checked in the asset.
          checked-in-since: Assets that have been checked in since date/time.
          checked-in-until: Assets that have been checked in until date/time.
          source-ctrld: Flag to indicate that the asset is source controlled.
          hash: Source control hash. Supports partial hash using a wildcard ( * ).
          published-by: User who published the asset. Applicable to Application Integration.
          published-since: Assets that have been published since date/time.
          published-until: Assets that have been published until date/time.
          updated-by: The user who last updated the assets. Use the userName value for the user.
          updated-since: Assets that have been updated since date/time.
          updated-until: Assets that have been updated until date/time.
      
      dependencies:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If tagging multiple objects, use this property to include the JSON body. Only use this if not using --id, --path, --type or --tags options.
          ref_type: "Whether to list objects that the asset uses or objects that use the asset. Use one of the following values: uses, usedBy"
      
      add-tags:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If tagging multiple objects, use this property to include the JSON body. Only use this if not using --id, --path, --type or --tags options.
          tags: Comma separated list of tags to be added to the object.
        errors:
          body-id-path-type-missing: Either the body, id, or both the path and type need to be provided.
          path-type-missing: Both path and type must be included when not searching by id or body.

      remove-tags:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If removing tags from multiple objects, use this property to include the JSON body. Only use this if not using --id, --path, --type or --tags options.
          tags: Comma separated list of tags to be removed from the object.
        errors:
          body-id-path-type-missing: Either the body, id, or both the path and type need to be provided.
          path-type-missing: Both path and type must be included when not searching by id or body.

    permissions:
      get:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          acl: Permissions ACL id.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          check_access: Flag to check your access rights before you attempt to create an asset in a project or folder.
          check_type: Object type to be checked if you have permission to create.
      create:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          ptype: Principal type. Valid values are USER or GROUP.
          pname: Principal name.
          read: Flag whether to allow the user or group to view the object. 
          update: Flag whether to allow the user or group to update the object. 
          delete: Flag whether to allow the user or group to delete the object. 
          execute: Flag whether to allow the user or group to execute the object. 
          change: Flag whether to allow the user or group to change the object. 
      update:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          acl: Permissions ACL id.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          ptype: Principal type. Valid values are USER or GROUP.
          pname: Principal name.
          read: Flag whether to allow the user or group to view the object. 
          update: Flag whether to allow the user or group to update the object. 
          delete: Flag whether to allow the user or group to delete the object. 
          execute: Flag whether to allow the user or group to execute the object. 
          change: Flag whether to allow the user or group to change the object. 
      delete:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          acl: Permissions ACL id. If not included all permissions are deleted from the object.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.

    projects:
      create:
        options:
          name: Name for the new project.
          description: Description of the new project.

      update:
        options:
          id: ID for the project to be updated. Use this option or --path.
          path: Path of the project to be updated. Use this option or --id.
          name: New name for the project.
          description: New description for the project.

      delete:
        options:
          id: ID for the project to be deleted. Use this option or --path.
          path: Path of the project to be deleted. Use this option or --id.

    folders:
      create:
        options:
          project_id: ID for the parent project. Use this option or --project_name.
          project_name: Name for the parent project. Use this option or --project-id.
          name: Name for the new folder
          description: Description for the new folder
        errors:
          pid-pname-missing: Either the project id or project name must be provided.

      update:
        options:
          id: ID for the folder to be updated. Use this option or --path.
          path: Path of the folder to be updated. Use this option or --id.
          name: New name for the folder.
          description: New description for the folder.
        errors:
          id-path-missing: Either the id or path must be provided.

      delete:
        options:
          id: ID for the folder to be deleted. Use this option or --path.
          path: Path of the folder to be deleted. Use this option or --id.
        errors:
          id-path-missing: Either the id or path must be provided.

    source-control:
      check-in:
        options:
          summary: 'The summary that should be included in the git commit.'
          description: ' The description that should be included in the git commit.'
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If checking in multiple objects, use this property to include the JSON body. Only use this if not using --id, --path or --type.
          include_container: Whether all objects in a project or folder are included in the check-in.

      check-out:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If checking out multiple objects, use this property to include the JSON body. Only use this if not using --id, --path or --type.
          include_container: Whether all objects in a project or folder are included in the check-out.

      undo-check-out:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If undoing check out multiple objects, use this property to include the JSON body. Only use this if not using --id, --path or --type.
          include_container: Whether all objects in a project or folder are included in the undo check-out.

      pull:
        options:
          id: Global unique identifier for the object. Required if object path and type not included.
          path: Full path of the object including project, folder, and object name. Required with type if object ID not included.
          type: Type of object. Required with path if object ID not included.
          body: If checking out multiple objects, use this property to include the JSON body. Only use this if not using --id, --path or --type.
          hash: Unique commit hash to pull.
          relax_validation: The objectSpecification objects are ignored if the sources don't exist in the assets that are included in the pull.

      pull-commit-hash:
        options:
          hash: Unique commit hash to pull.
          search: Flag to search project-level repositories if the commit hash wasn't found for the global repository.
          repo_id: Connection ID of the project-level repository to search. If not specified, the global repository is searched.
          relax_validation: The objectSpecification objects are ignored if the sources don't exist in the assets that are included in the pull.

      status:
        options:
          id: ID of the source control action.

      repo-details:
        options:
          project_ids: Comma separated list of project id's to return the repository details for. Required if --project-names is not used.
          project_names: Comma separated list of project names to return the repository details for. Required if --project-ids is not used.
        errors:
          pid-pname-missing: Either the project-ids or project-names option must be included.

      commit-history:
        options:
          id: ID of the project, folder, or asset.
          path: Project or path where the assets are located. Required if --id is not specified.
          type: Type of the asset. Required if --id is not specified.
          branch: Repository branch, if different from the branch that's configured for the organization.

      commit-details:
        options:
          hash: Commit hash for the details to be returned.
          search_all: Flag whether to search project-level repositories if the commit hash wasn't found for the global repository.
          repo_id: Connection ID of the project-level repository to search.

      compare-versions:
        options:
          id: ID of the project, folder, or asset.
          path: Project or path where the assets are located. Required if --id is not specified.
          type: Type of the asset. Required if --id is not specified.
          old_version: "The base version of the asset to compare. If the asset version to compare is checked in to the repository, use the commit hash for the value. If the asset version to compare hasn't been checked in, use the following value: CURRENT-VERSION"
          new_version: "The asset version to compare to the base version. If the asset version to compare is checked in to the repository, use the commit hash for the value. If the asset version to compare hasn't been checked in, use the following value: CURRENT-VERSION"
          format: Response format. Use either JSON or TEXT.

    logs:
      security:
        options:
          category: Category of the security log entry.
          actor: User name who performed the action.
          name: Name of the object acted upon.
          time_from: Date/time to search from. The maximum date range is 14 days.
          time_to: Date/time to search until. The maximum date range is 14 days.
      completed-activity:
        options:
          id: Log entry ID. Include this attribute if you want to receive information for a specific ID.
          run-id: Job ID associated with the log entry ID. Whenever runId is included in a request, taskId is required. 
          task-id: Task ID associated with the log entry ID. If taskId is not specified, all activityLog entries for all tasks are returned.
          name: Name of the job.
      running-activity:
        options:
          id: Log entry ID. Include this attribute if you want to receive information for a specific ID.
          run-id: Job ID associated with the log entry ID. Whenever runId is included in a request, taskId is required. 
          task-id: Task ID associated with the log entry ID. If taskId is not specified, all activityLog entries for all tasks are returned.
          name: Name of the job.
        errors:
          task-id-missing: Task ID must be provided with run-id.
          
    agents:
      get:
        options:
          id: Secure Agent ID. If searching for a specific agent, either this option or the name option must be included.
          name: Secure Agent Name. If searching for a specific agent, either this option or the id option must be included.
          unassigned: Flag to include a list of all the Secure Agents that are currently not assigned to any group.

      delete:
        options:
          id: Secure Agent ID. Either this option or the name option must be included.
          name: Secure Agent Name. Either this option or the id option must be included.
          unassigned: Flag to include a list of all the Secure Agents that are currently not assigned to any group.

      status:
        options:
          id: Secure Agent ID. Either this option or the name option must be included.
          name: Secure Agent Name. Either this option or the id option must be included.

    agentGroup:
      get:
        options:
          id: Secure Agent Group ID. If searching for a specific group, use either this option or the name option.
          name: Secure Agent Group Name. If searching for a specific group, use either this option or the id option.

      create:
        options:
          name: Secure Agent Group Name.
          shared: Flag whether the Secure Agent group can be shared with sub-organizations. 

      add:
        options:
          group_id: Secure Agent Group ID. Either this option or the group-name option must be included.
          group_name: Secure Agent Group Name. Either this option or the group-id option must be included.
          agent_id: Secure Agent ID. Either this option or the agent-name option must be included. This option can be repeated to add multiple agents.
          agent_name: Secure Agent Name. Either this option or the agent-id option must be included. This option can be repeated to add multiple agents.
        errors:
          groupid-groupname-missing: Either the group id or group name option must be included.
          agentid-agentname-missing: Either the agent id or agent name option must be included.

      delete:
        options:
          id: Secure Agent Group ID. Either this option or the name option must be included.
          name: Secure Agent Group Name. Either this option or the id option must be included.

      list-components:
        options:
          id: Secure Agent Group ID. Either this option or the name option must be included.
          name: Secure Agent Group Name. Either this option or the id option must be included.
          include_all: Flag to include disabled components in the response.

      update-components:
        options:
          id: Secure Agent Group ID. Either this option or the name option must be included.
          name: Secure Agent Group Name. Either this option or the id option must be included.
          enable: Flag to enable components. Use this flag or the disable flag.
          disable: Flag to disable components. Use this flag or the enable flag.
          services: Service to be updated. Can be repeated for multiple services.
          connectors: Connector to be updated. Can be repeated for multiple connectors.
          additional: Additional service to be updated. Can be repeated for multiple additional services.
        errors:
          enable-disable-missing: Either the enable or disable option must be included.
          services-connectors-additional-missing: Either the services, connectors or additional options must be included.

      list-props:
        options:
          id: Secure Agent Group ID. Either this option or the name option must be included.
          name: Secure Agent Group Name. Either this option or the id option must be included.
          overridden: Flag to show properties that have been overridden at the secure agent group level.
          platform: Optionally, include the platform in the URI. You can use linux64 or win64.
          service: Filter result by service name.
          type: Filter result by property type. Must be used in conjunction with the service option.
          property: Filter result by property name. Must be used in conjunction with the service and type options.
        

      update-prop:
        options:
          id: Secure Agent Group ID. Either this option or the name option must be included.
          name: Secure Agent Group Name. Either this option or the id option must be included.
          service: Service to be updated.
          type: Property type to be updated.
          property: Property name to be updated.
          value: New property value.
          platform: Optionally, include the platform in the URI. You can use linux64 or win64.
          custom: Flag to indicate if property is a custom property.
          sensitive: Flag to indicate if property is a sensitive property and should be masked.

      delete-props:
        options:
          id: Secure Agent Group ID. Either this option or the name option must be included.
          name: Secure Agent Group Name. Either this option or the id option must be included.
      
    services:
      stop:
        options:
          id: Runtime environment ID. Either this option or the name option must be included.
          name: Runtime environment Name. Either this option or the id option must be included.
          service: Service to be stopped on the runtime environment.
      start:
        options:
          id: Runtime environment ID. Either this option or the name option must be included.
          name: Runtime environment Name. Either this option or the id option must be included.
          service: Service to be started on the runtime environment.

    schedules:
      get:
        options:
          id: Filter the response by schedule id.
          name: Filter the response by schedule name.
          status: Filter by schedule status.
          interval: Filter by schedule interval. Valid values include Minutely, Hourly, Daily, Weekly, Biweekly, and Monthly.
          time_from: Filter by schedule updated since.
          time_to: Filter by schedule updated up until.

      create:
        options:
          name: Schedule name.
          description: Description of the schedule.
          status: Status of the schedule. Can be 'enabled' or 'disabled'.
          start_time: Date and time when the schedule starts running, in UTC format.
          end_time: Date and time when the schedule stops running. If you do not use this parameter, the schedule runs indefinitely.
          interval: "Interval or repeat frequency at which the schedule runs tasks. Use one of the following options: None, Minutely, Hourly, Daily, Weekly, Biweekly or Monthly."
          frequency: |
            Repeat frequency for tasks. Use one of the following values:
              - For Minutely intervals, use one of the following options: 5, 10, 15, 20, 30, 45. Default is 5.
              - For Hourly intervals, use one of the following options: 1, 2, 3, 4, 6, 8, 12. Default is 1. 
              - For Daily intervals, use number of days between 1 -30. Default is 1.
            Use with Minutely, Hourly, and Daily intervals only.
          range_start: The start of the time range within a day that you want tasks to run. Enter a date and time using standard date/time format. Only the time portion is used. Use with Minutely, Hourly, and Daily intervals only.
          range_end: The end of the time range within a day that you want tasks to run. Enter a date and time using standard date/time format. Only the time portion is used. Use with Minutely, Hourly, and Daily intervals only. 
          timezone: Time zone that the schedule uses for the dayOfMonth, weekOfMonth, and dayOfWeek fields. Default is UTC. 
          weekday: Flag to indicate that tasks run on weekdays. Use with the Daily interval only.
          day_of_month: "Date of the month that tasks should run. Use a date between 1-28. Use with the Monthly interval only. Tip: To run tasks on the last day of the month, use the Last weekOfMonth parameter with the Day dayOfWeek parameter."
          week_of_month: |
            Week of the month that tasks should run. Use with dayOfWeek to specify the day and week of the month that tasks should run. For example, the First Day or the Last Wednesday of the month.
            Use one of the following options:
              - First
              - Second
              - Third
              - Fourth
              - Last 
            Use with the Monthly interval only. 
          day_of_week:
          sun: Runs tasks on Sunday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          mon: Runs tasks on Monday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          tue: Runs tasks on Tuesday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          wed: Runs tasks on Wednesday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          thu: Runs tasks on Thursday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          fri: Runs tasks on Friday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          sat: Runs tasks on Saturday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
        errors:
          day-missing: The sun to sat flags should only be used with 'Minutely', 'Hourly', 'Weekly' or 'Biweekly' intervals.
          weekday-incorrect: The weekday option should only be used with the 'Daily' interval.
          month-incorrect: The day of week, day of month and week of month options should only be used with the 'Daily' interval.
          frequency-incorrect: The frequency option should only be used with the 'Minutely', 'Hourly' and 'Daily' options.
          range-start-incorrect: The range start option should only be used with the 'Minutely', 'Hourly' and 'Daily' options.
          range-end-incorrect: The range end option should only be used with the 'Minutely', 'Hourly' and 'Daily' options.
          timezone-incorrect: The timezone option should only be used in conjunction with the day of week, day of month and week of month options.

      update:
        options:
          id: ID of the schedule to be updated. If not included then the name option must be included.
          name: Schedule name.
          description: Description of the schedule.
          status: Status of the schedule. Can be 'enabled' or 'disabled'.
          start_time: Date and time when the schedule starts running, in UTC format.
          end_time: Date and time when the schedule stops running. If you do not use this parameter, the schedule runs indefinitely.
          interval: "Interval or repeat frequency at which the schedule runs tasks. Use one of the following options: None, Minutely, Hourly, Daily, Weekly, Biweekly or Monthly."
          frequency: |
            Repeat frequency for tasks. Use one of the following values:
              - For Minutely intervals, use one of the following options: 5, 10, 15, 20, 30, 45. Default is 5.
              - For Hourly intervals, use one of the following options: 1, 2, 3, 4, 6, 8, 12. Default is 1. 
              - For Daily intervals, use number of days between 1 -30. Default is 1.
            Use with Minutely, Hourly, and Daily intervals only.
          range_start: The start of the time range within a day that you want tasks to run. Enter a date and time using standard date/time format. Only the time portion is used. Use with Minutely, Hourly, and Daily intervals only.
          range_end: The end of the time range within a day that you want tasks to run. Enter a date and time using standard date/time format. Only the time portion is used. Use with Minutely, Hourly, and Daily intervals only. 
          timezone: Time zone that the schedule uses for the dayOfMonth, weekOfMonth, and dayOfWeek fields. Default is UTC. 
          weekday: Flag to indicate that tasks run on weekdays. Use with the Daily interval only.
          day_of_month: "Date of the month that tasks should run. Use a date between 1-28. Use with the Monthly interval only. Tip: To run tasks on the last day of the month, use the Last weekOfMonth parameter with the Day dayOfWeek parameter."
          week_of_month: |
            Week of the month that tasks should run. Use with dayOfWeek to specify the day and week of the month that tasks should run. For example, the First Day or the Last Wednesday of the month.
            Use one of the following options:
              - First
              - Second
              - Third
              - Fourth
              - Last 
            Use with the Monthly interval only. 
          day_of_week:
          sun: Runs tasks on Sunday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          mon: Runs tasks on Monday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          tue: Runs tasks on Tuesday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          wed: Runs tasks on Wednesday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          thu: Runs tasks on Thursday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          fri: Runs tasks on Friday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
          sat: Runs tasks on Saturday at the configured time. You can use the sun - sat parameters to run tasks on several days of the week.
        errors:
          day-missing: The sun to sat flags should only be used with 'Minutely', 'Hourly', 'Weekly' or 'Biweekly' intervals.
          weekday-incorrect: The weekday option should only be used with the 'Daily' interval.
          month-incorrect: The day of week, day of month and week of month options should only be used with the 'Daily' interval.
          frequency-incorrect: The frequency option should only be used with the 'Minutely', 'Hourly' and 'Daily' options.
          range-start-incorrect: The range start option should only be used with the 'Minutely', 'Hourly' and 'Daily' options.
          range-end-incorrect: The range end option should only be used with the 'Minutely', 'Hourly' and 'Daily' options.
          timezone-incorrect: The timezone option should only be used in conjunction with the day of week, day of month and week of month options.

      delete:
        options:
          id: ID of the schedule to be deleted. Use this option or the name option.
          name: Name of the schedule to be deleted. Use this option or the id option.

      enable:
        options:
          id: ID of the schedule to be enabled. Use this option or the name option.
          name: Name of the schedule to be enabled. Use this option or the id option.

      disable:
        options:
          id: ID of the schedule to be disabled. Use this option or the name option.
          name: Name of the schedule to be disabled. Use this option or the id option.

    orgs:
      get:
        options:
          sub-id: ID of sub-organisation to be returned.
          sub-name: Name of sub-organisation to be returned.
    
    jobs:
      get:
        options:
          name: Filter the jobs by name.
          start-since: Date and time the task started since.
          start-until: Date and time the task started until.
          end-since: Date and time the task ended since.
          end-until: Date and time the task ended until.
          status: "Comma separated list of statuses for the tasks. You can filter by any of the following statuses: 'ABORTED', 'AWAITING_AUTO_RESTART', 'CHILD_SUSPENDED', 'COMPLETED', 'DEPLOYED', 'DEPLOYING', 'ERROR', 'FAILED', 'INITIALIZED', 'NOT_STARTED', 'PROCESSING_ABORT', 'PROCESSING_DEPLOY', 'PROCESSING_STOP', 'PROCESSING_UNDEPLOY', 'QUEUED', 'RUNNING', 'SKIPPED', 'STOPPED', 'SUBMITTED', 'SUCCESS', 'SUSPENDED', 'TRYING_TO_STOP', 'UNDEPLOYED', 'UNDEPLOYING', 'WARNING'"
          type: "Type of asset. You can filter by any of the following types: 'API', 'APPMI_TASK', 'AS2_RECEIVE', 'AS2_SEND', 'BATCH_MAPPING', 'CodeTask', 'command', 'DBMI_GROUP_TASK', 'DBMI_TASK', 'DLT', 'DMASK', 'DRS', 'DSS', 'DTT', 'EXCEPTION', 'FILE_TRANSFER_TASK', 'FTP_CLIENT', 'FTPS_CLIENT', 'HTTPS_SERVER', 'MAPPING', 'MI_FILE_LISTENER', 'MI_TASK', 'MLLP_SERVER', 'MTT', 'MTT_DP', 'MTT_DP_CDIE', 'MTT_PDO', 'MTT_TEST', 'PCS', 'PROFILE', 'SFTP_CLIENT', 'SFTP_SERVER', 'SI_DATAFLOW', 'TASKFLOW', 'TunerTask', 'WORKFLOW'."
          order-by: Sort order in which to return the data. Ascending by default. Include "desc" after order by field if needed.
          error-msg: Filter the jobs by error messages that contain this value.
          location: Filter the jobs by project/folder location.
          runtime: Filter the jobs by the name of the runtime environment.
      start:
        options:
          ids: Comma separated list of global unique identifier for the task to start. Must be used if path is not included.
          paths: Comma separated list of paths to the task to be started. Supports the '*' (matches everything) and '?' (matches any single character) wildcard characters.
          type: "The type of task. Valid values include: DMASK, DRS, DSS, MTT, PCS, WORKFLOW, TASKFLOW. The taskflow must be first published."
          callback: URL endpoint to be called when the job is finished.
          param-file: Parameter file name. Must be used in conjunction with the param-dir option.
          param-dir: Parameter file directory on the Secure Agent machine. Must be used in conjunction with the param-file option.
          api-names: Comma separated list of API names for the taskflows to be executed.
          wait: Flag to wait for all jobs to finish.
          poll-delay: Time in seconds to wait between job status polling when waiting for them to finish.
        errors:
          param-file-dir-missing: If specifying a parameter file then both the param-file and param-dir options must be included.
          api-name-missing: If specifying the TASKFLOW type you must also include the api-name option.
      stop:
        options:
          ids: Comma separated list of global unique identifiers for the running jobs.
          names: Comma separated list of names of jobs to be stopped.
          locations: Comma separated list of locations of jobs to be stopped.
          types: "Comma separated list of types of jobs to be stopped. Valid values include: DMASK, DRS, DSS, MTT, PCS, WORKFLOW, TASKFLOW. The taskflow must be first published."
          clean: Flag to indicate a clean stop of the job should be executed. Not applicable for TASKFLOW types.